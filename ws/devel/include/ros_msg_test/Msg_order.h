// Generated by gencpp from file ros_msg_test/Msg_order.msg
// DO NOT EDIT!


#ifndef ROS_MSG_TEST_MESSAGE_MSG_ORDER_H
#define ROS_MSG_TEST_MESSAGE_MSG_ORDER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_msg_test
{
template <class ContainerAllocator>
struct Msg_order_
{
  typedef Msg_order_<ContainerAllocator> Type;

  Msg_order_()
    : stamp()
    , menu_data()
    , menu_cnt_data(0)
    , total(0)  {
    }
  Msg_order_(const ContainerAllocator& _alloc)
    : stamp()
    , menu_data(_alloc)
    , menu_cnt_data(0)
    , total(0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _menu_data_type;
  _menu_data_type menu_data;

   typedef int32_t _menu_cnt_data_type;
  _menu_cnt_data_type menu_cnt_data;

   typedef int32_t _total_type;
  _total_type total;





  typedef boost::shared_ptr< ::ros_msg_test::Msg_order_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_msg_test::Msg_order_<ContainerAllocator> const> ConstPtr;

}; // struct Msg_order_

typedef ::ros_msg_test::Msg_order_<std::allocator<void> > Msg_order;

typedef boost::shared_ptr< ::ros_msg_test::Msg_order > Msg_orderPtr;
typedef boost::shared_ptr< ::ros_msg_test::Msg_order const> Msg_orderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_msg_test::Msg_order_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_msg_test::Msg_order_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_msg_test::Msg_order_<ContainerAllocator1> & lhs, const ::ros_msg_test::Msg_order_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.menu_data == rhs.menu_data &&
    lhs.menu_cnt_data == rhs.menu_cnt_data &&
    lhs.total == rhs.total;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_msg_test::Msg_order_<ContainerAllocator1> & lhs, const ::ros_msg_test::Msg_order_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_msg_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_msg_test::Msg_order_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_msg_test::Msg_order_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_msg_test::Msg_order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_msg_test::Msg_order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_msg_test::Msg_order_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_msg_test::Msg_order_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_msg_test::Msg_order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ed0e9a3e1cd53d539f1bd23d1faae35";
  }

  static const char* value(const ::ros_msg_test::Msg_order_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ed0e9a3e1cd53d5ULL;
  static const uint64_t static_value2 = 0x39f1bd23d1faae35ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_msg_test::Msg_order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_msg_test/Msg_order";
  }

  static const char* value(const ::ros_msg_test::Msg_order_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_msg_test::Msg_order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"string menu_data\n"
"int32 menu_cnt_data\n"
"int32 total\n"
;
  }

  static const char* value(const ::ros_msg_test::Msg_order_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_msg_test::Msg_order_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.menu_data);
      stream.next(m.menu_cnt_data);
      stream.next(m.total);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Msg_order_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_msg_test::Msg_order_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_msg_test::Msg_order_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "menu_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.menu_data);
    s << indent << "menu_cnt_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.menu_cnt_data);
    s << indent << "total: ";
    Printer<int32_t>::stream(s, indent + "  ", v.total);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_MSG_TEST_MESSAGE_MSG_ORDER_H
